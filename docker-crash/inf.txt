docker build -t llstrevensll/hello-world-rest-api:dockerfile1 .
docker run -d -p 8080:8080 llstrevensll/hello-world-rest-api:dockerfile1
docker logs 23d859d310ab31d053


mvn package -DskipTests

<repository>llstrevensll/${project.name}</repository>  //project.name = <name>hello-world-rest-api</name>
<tag>${project.version}</tag>  //project.version = <version>0.0.1-SNAPSHOT</version>


docker images
docker run -d -p 8080:8080 llstrevensll/hello-world-rest-api:0.0.1-SNAPSHOT

#Caching docker image to add dependencies in another stage
https://spring.io/guides/topicals/spring-boot-docker/
https://stackoverflow.com/questions/18093928/what-does-could-not-find-or-load-main-class-mean

Use Plugin maven-dependency-plugin
<id>unpack</id>
						<phase>package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>


mvn clean package
docker build -t llstrevensll/hello-world-rest-api:dockerfile1 .
docker run -d -p 8080:8080 llstrevensll/hello-world-rest-api:dockerfile1
docker exec -it 33e56ff4deec /bin/sh


=======
CMD - Default parameters
When you pass parameters from command line, Your default parameters are overridden.

docker run -p 8080:8080 llstrevensll/todo-web-application-h2:0.0.1-SNAPSHOT ping google.com

ENTRYPOINT
Is a way of making your container as an executable. When you pass
any arguments to the container, those arguments will not override the ENTRYPOINT

docker run -p 8080:8080 llstrevensll/hello-world-rest-api:dockerfile1 param1 param2

But if you use the argument --entrypoint, then you can override the ENTRYPOINT which is configured

---
push image with spotify dockerfile plugin
You need configure your file settings.xml

<servers>
  <server>
    <id>docker-repo.example.com:8080</id>
	<username>me</username>
	<password>mypassword</password>
  </server>
</servers>
